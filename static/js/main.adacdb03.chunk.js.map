{"version":3,"sources":["calculations/maps.ts","calculations/util.ts","ui/degrees-input.tsx","ui/number-input.tsx","PVArraysInfo/PVArrayInfo.tsx","PVArraysInfo/PVArraysInfo.tsx","util.ts","calculations/wh-factor.ts","display/energy-production.ts","display/AverageOutputPerDayByMonth.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["year","toRadians","Math","acos","tan","angle","PI","sin","currentYear","cos","asin","Date","getFullYear","daysInYear","maxDecRad","declinationsForYear","result","Array","i","orientationsToAzimuth","forEach","orientation","addDegree","num","String","charCodeAt","length","fromCharCode","DegreesInput","props","_label","onChange","value","moreProps","useState","fakeVal","setFakeVal","className","htmlFor","name","aria-label","onBlur","onFocus","str","substr","Number","e","target","NumberInput","PVArrayInfo","remove","setVal","val","tilt","Object","keys","map","key","watts","onClick","PVArraysInfo","pvArrays","setPVArrays","pvArrayInit","removeArray","slice","pvArray","memoize","fn","cache","args","JSON","stringify","prefix","mTan","calculateWHFactorForYear","opts","dec","calculateWHFactorForDay","lat","intervalRad","F","n","a","b","Error","h","sum","simpson","x","hourAngle","percentage","instantIntensityPercentage","samplesPerDay","azimuth","sinLat","sinDec","cosHA","sinHA","cosLat","cosDec","altitude","cosAlt","tmp","getDaysInMonth","month","getDate","getAvgProdByMonth","pvArrayInfo","whFactorInfo","whFactorForYear","curDay","_","arr","monthFactors","reduce","acc","cur","whFactor","getAvgProdByMonthLS","window","localStorage","parse","truncate","precision","factor","monthLabels","AverageOutputPerDayByMonth","getAvgProdsByMonth","calculating","data","time","avgProdByMonth","setAvgProdByMonth","console","log","setTimeout","startTime","endTime","label","averageProduction","production","colSpan","style","border","lsPVArrays","pvArraysInit","latInit","App","setLat","latAdjusted","pvArraysCleaned","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.adacdb03.chunk.js","sourcesContent":["import { toRadians } from \"./util\"\n\nconst {\n  sin,\n  cos,\n  asin,\n  acos,\n  PI\n} = Math\n\nconst currentYear = new Date().getFullYear()\nconst isLeapYear = year => year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)\nconst daysInYear = isLeapYear(currentYear) ? 366 : 365\nconst maxDecRad = toRadians(23.45)\nconst getDeclinationFromDayOfYear = dayOfYear => (\n  maxDecRad * sin(toRadians(360/365 * (dayOfYear - 81)))\n)\nexport const declinationsForYear = (() => {\n  const result = new Array(daysInYear)\n  for (let i = 0; i < daysInYear; i++) {\n    result[i] = getDeclinationFromDayOfYear(i)\n  }\n  return result\n})()\n\n\nexport const orientationsToAzimuth = (() => {\n  const orientations = [\n    'N',\n    'NNE',\n    'NE',\n    'ENE',\n    'E',\n    'ESE',\n    'SE',\n    'SSE',\n    'S',\n    'SSW',\n    'SW',\n    'WSW',\n    'W',\n    'WNW',\n    'NW',\n    'NNW',\n  ]\n  const result = {}\n  orientations\n    .forEach((orientation, i) => result[orientation]= i*22.5)\n  return result\n})()\n","const {\n  acos,\n  tan\n} = Math\nexport const toRadians = angle => angle * Math.PI / 180\nexport const toDegrees = angle => angle * 180 / Math.PI\n\nexport const simpson = (F, n, a, b) => {\n    if (n % 2 !== 0) {\n        throw new Error(\"n must be even\")\n    }\n    const h = (b - a) / n\n    let sum = F(a);\n\n    for (let i = 1; i < n; i++) {\n        sum += F(i*h + a) * (i % 2 == 0 ? 2 : 4)\n    }\n\n    sum += F(n*h)\n\n    return sum * h / 3\n}\n\n\n","import React, { useState } from 'react'\nimport \"./degrees-input.css\"\n\n export const addDegree = num => {\n if (String(num).charCodeAt(num.length - 1) == 176) {\n    return num\n  }\n  return num + String.fromCharCode(176)\n}\nexport const removeDegree = str => {\n  str = String(str)\n  if (str.charCodeAt(str.length - 1) == 176)\n    return str.substr(0, str.length - 1)\n  return Number(str)\n}\nexport const DegreesInput = props => {\n  const {_label, onChange, value, ...moreProps} = props\n  const [fakeVal, setFakeVal] = useState(addDegree(value))\n  return <>\n    <label className=\"degrees-label\" htmlFor={_label}>{_label}</label>\n    <input\n      className=\"degrees-input\"\n      name={_label}\n      value={fakeVal}\n      aria-label={_label}\n      onBlur={() => {\n        const val = value === \"\" ? 0 : value\n        setFakeVal(addDegree(val))\n      }}\n      onFocus={() => {\n        setFakeVal(removeDegree(value))\n      }}\n      onChange={e => {\n        setFakeVal(e.target.value)\n        onChange(e.target.value)\n      }}\n      {...moreProps}\n\n    />\n  </>\n}","import React from 'react'\nimport \"./number-input.css\"\n\nexport const NumberInput = props => {\n  const {_label, ...moreProps} = props\n  return <>\n    <label className=\"number-label\" htmlFor={_label}>{_label}</label>\n    <input\n      className=\"number-input\"\n      name={_label}\n      aria-label={_label}\n      {...moreProps}\n    />\n  </>\n}","import React from 'react'\nimport { orientationsToAzimuth } from '../calculations/maps'\nimport { DegreesInput } from '../ui/degrees-input'\nimport \"./PVArrayInfo.css\"\nimport { NumberInput } from '../ui/number-input'\n\nexport const PVArrayInfo = ({remove, setVal, val}) => {\n  return <>\n    <div className=\"form-group\">\n      <DegreesInput\n        onChange={value => setVal(\"tilt\", value)}\n        _label=\"Tilt\"\n        value={val.tilt}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"orientation\">Orientation</label>\n      <select\n        className=\"select-group\"\n        value={val.orientation}\n        onChange={e => setVal(\"orientation\", e.target.value)}\n      >\n        {\n          Object.keys(orientationsToAzimuth)\n            .map(orientation => (\n              <option\n              key={orientation}\n              value={orientation}\n              >\n                {orientation}\n              </option>\n            )\n          )\n        }\n      </select>\n    </div>\n    <div className=\"form-group\">\n      <NumberInput\n        _label=\"Watts\"\n        value={val.watts}\n        onChange={e => setVal(\"watts\", e.target.value)}\n      />\n      <button className=\"button\" onClick={remove}>-</button>\n    </div>\n  </>\n}\n","import React, {useState} from 'react'\nimport \"./PVArraysInfo.css\"\nimport { PVArrayInfo } from './PVArrayInfo'\n\nexport const PVArraysInfo = ({pvArrays, setPVArrays, pvArrayInit}) => {\n\n  const addArray = () => setPVArrays([...pvArrays, pvArrayInit])\n  const removeArray = i => () => setPVArrays([\n    ...pvArrays.slice(0, i),\n    ...pvArrays.slice(i + 1),\n  ])\n  const setVal = i => (key, val) => setPVArrays([\n    ...pvArrays.slice(0, i),\n    {\n      ...pvArrays[i],\n      [key]: val,\n    },\n    ...pvArrays.slice(i + 1),\n  ])\n  return <>\n    <div className=\"panels-group\">\n      <h3 className=\"pv-arrays-header\">PV Arrays</h3>\n      {pvArrays.map((pvArray, i) => (\n        <div>\n        <span className=\"array-number\">{i+ 1}.</span>\n        <PVArrayInfo\n          key={i}\n          setVal={setVal(i)}\n          remove={removeArray(i)}\n          val={pvArrays[i]}\n        />\n        </div>\n      ))}\n    <button className=\"button\" onClick={addArray}>+</button>\n    </div>\n  </>\n}","export const memoize = fn => {\n  const cache = {}\n  return (...args) => {\n    const key = JSON.stringify(args)\n    if (cache[key]) {\n      return cache[key]\n    }\n    return cache[key] = fn(...args)\n  }\n}\n\nexport const memoizeLS = (prefix, fn) => {\n  return (...args) => {\n    const key = \"memoizeLS1.1\" + prefix + JSON.stringify(args)\n    if (window.localStorage[key]) {\n      return JSON.parse(window.localStorage[key])\n    }\n    const result = fn(...args)\n    window.localStorage[key] = JSON.stringify(result)\n    return result\n  }\n}","import { simpson, toRadians } from './util'\nimport { declinationsForYear } from './maps'\nimport { memoize } from '../util'\nconst SAMPLES_PER_DAY = 1000\n\nconst {\n  sin,\n  cos,\n  asin,\n  acos,\n  tan,\n  PI\n} = Math\n\nconst mCos = memoize(cos)\nconst mSin = memoize(sin)\nconst mTan = memoize(tan)\n\nexport const calculateWHFactorForYear = memoize(opts => (\n  declinationsForYear.map(dec => calculateWHFactorForDay({...opts, dec}))\n))\n\nexport const noonToSunsetRad = (lat, dec) => (\n  acos(-mTan(lat)*mTan(dec)) / toRadians(15)\n)\nexport const calculateWHFactorForDay = memoize(opts => {\n  const instantPercentage = x => {\n    const hourAngle = x*PI/12\n    if (typeof hourAngle === \"undefined\") {\n      debugger\n    }\n    const percentage = instantIntensityPercentage({\n      ...opts,\n      hourAngle\n    })\n    if (percentage < 0) {\n      return 0\n    }\n    return percentage\n  }\n  const intervalRad = noonToSunsetRad(opts.lat, opts.dec)\n  const result = simpson(instantPercentage, opts.samplesPerDay, -intervalRad, intervalRad)\n  return result\n})\n\nexport const instantIntensityPercentage = memoize(opts => {\n  const { lat, dec, tilt, orientation, hourAngle } = opts\n  const sinLat = sin(lat)\n  const sinDec = sin(dec)\n  const cosHA = cos(hourAngle)\n  const sinHA = sin(hourAngle)\n  const cosLat = cos(lat)\n  const cosDec = cos(dec)\n  const altitude = asin(sinDec * sinLat + cosDec * cosHA * cosLat)\n  const cosAlt = cos(altitude)\n\n  const tmp = (sinDec * cosLat - cosDec * cosHA * sinLat) /  cosAlt\n\n  let azimuth;\n  if (tmp < -1) {\n    azimuth = Math.PI\n  } else if (tmp > 1) {\n    azimuth = 0\n  } else {\n    azimuth = acos(tmp)\n  }\n\n  if (sinHA > 0) {\n    azimuth = 2 * PI - azimuth\n  }\n  const sinAlt = sin(altitude)\n  return sinAlt * cos(tilt) + cosAlt * sin(tilt) * cos(orientation - azimuth)\n})","import { calculateWHFactorForYear } from \"../calculations/wh-factor\"\nimport { memoize, memoizeLS } from \"../util\"\n\n\nconst currentYear = new Date().getFullYear()\nconst getDaysInMonth = memoize((year, month) => new Date(year, month, 0).getDate())\nconst getIntervalAvg = arr => arr.reduce((acc, cur) => acc+cur, 0) / arr.length\n\nexport const getAvgProdByMonth = memoize(pvArrayInfo => {\n  const { watts, ...whFactorInfo } = pvArrayInfo\n  const whFactorForYear = calculateWHFactorForYear(whFactorInfo)\n  let curDay = 0\n  return [...new Array(12)]\n    .map((_, i) => {\n      const monthFactors = whFactorForYear\n        .slice(curDay, curDay += getDaysInMonth(currentYear, i))\n      const intervalAvg = getIntervalAvg(monthFactors)\n      return intervalAvg\n    })\n    .map(whFactor => whFactor*watts)\n})\n\nexport const getAvgProdByMonthLS = memoizeLS(\"getAvgProdByMonth\", getAvgProdByMonth)","import React, { useState } from 'react'\nimport { getAvgProdByMonth, getAvgProdByMonthLS } from './energy-production'\nimport \"./styles.css\"\n\n\nconst truncate = (num, precision) => {\n  const factor = 10**precision\n  return (num * factor | 0) / factor\n}\nconst monthLabels = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n]\nexport const AverageOutputPerDayByMonth = ({pvArrays, lat}) => {\n  const getAvgProdsByMonth = pvArrays => pvArrays\n    .map(pvArray => getAvgProdByMonthLS({...pvArray, lat, samplesPerDay: 100}))\n  const [avgProdByMonth, setAvgProdByMonth] =\n    useState({\n      calculating: false,\n      data: [] as any[],\n      time: 0,\n    })\n\n  const calculate = () => {\n    setAvgProdByMonth({\n      data: [],\n      calculating: true,\n      time: 0,\n    })\n    setTimeout(() => {\n      const startTime = +new Date\n      const data = getAvgProdsByMonth(pvArrays)\n      const endTime = +new Date\n      setAvgProdByMonth({\n        data,\n        calculating: false,\n        time: endTime - startTime,\n      })\n    }, 0)\n  }\n  console.log(avgProdByMonth)\n\n  return (\n    <div>\n    <button className=\"button\" onClick={calculate}>Calculate</button>\n    <h3 className=\"display-header\">\n      Average Production Per Day By Month (kw/h)\n    </h3>\n    {avgProdByMonth.calculating ? <div className=\"calculating\">Calculating...</div> :\n    <>\n      <table>\n        <thead>\n          <tr>\n            <th>&nbsp;&nbsp;&nbsp;&nbsp;</th>\n            {monthLabels.map(label => <th key={label}>{label}</th>)}\n          </tr>\n        </thead>\n        <tbody>\n          {avgProdByMonth.data.map((averageProduction, i) => <tr key={i}>\n            <td>{i+1}.</td>\n            {averageProduction.map((production, i) => <td key={i}>{truncate(production / 1000, 2)}</td>)}\n          </tr>)}\n          {avgProdByMonth.time > .1 ?\n          <tr>\n            <td colSpan={13} style={{border: \"none\"}}>\n                <div className=\"calc-time\">Calculation Time: {truncate(avgProdByMonth.time/1000, 2)} seconds</div>\n            </td>\n          </tr>\n          : \"\" }\n        </tbody>\n      </table>\n    </>}\n    </div>\n  )\n}\n\nconst singleArray = averageProduction => {\n\n}\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport {PVArraysInfo} from './PVArraysInfo/PVArraysInfo';\nimport { AverageOutputPerDayByMonth } from './display/AverageOutputPerDayByMonth';\nimport { toRadians } from './calculations/util';\nimport { orientationsToAzimuth } from './calculations/maps';\nimport { DegreesInput } from './ui/degrees-input';\nimport { NumberInput } from './ui/number-input';\n\nconst pvArrayInit = {\n  tilt: 0,\n  orientation: \"S\",\n  watts: 500,\n}\nconst lsPVArrays = window.localStorage.pvArrays\nconst pvArraysInit = lsPVArrays ? JSON.parse(lsPVArrays) : [pvArrayInit]\nconst latInit = window.localStorage.lat ? window.localStorage.lat : 0\nconst samplesPerDayInit = window.localStorage.samplesPerDay ? Number(window.localStorage.samplesPerDay) : 100\nconst App: React.FC = () => {\n  const [pvArrays, setPVArrays] = useState(pvArraysInit)\n  const [lat, setLat] = useState(latInit)\n  const latAdjusted = toRadians(Number(lat))\n  const pvArraysCleaned = pvArrays.map(pvArray => ({\n    ...pvArray,\n    orientation: toRadians(orientationsToAzimuth[pvArray.orientation]),\n    tilt: toRadians(pvArray.tilt)\n  }))\n  window.localStorage.pvArrays = JSON.stringify(pvArrays)\n  window.localStorage.lat = lat\n  return (\n    <div className=\"App\">\n      <header>\n        <h1 className=\"header\">Solar Power Calculator</h1>\n      </header>\n      <div>\n        <div className=\"form-group\">\n        <DegreesInput\n          onChange={value => setLat(value)}\n          _label=\"Latitude\"\n          value={lat}\n        />\n        </div>\n        <div className=\"form-group\">\n        </div>\n      </div>\n      <PVArraysInfo\n        pvArrays={pvArrays}\n        setPVArrays={setPVArrays}\n        pvArrayInit={pvArrayInit}\n      />\n      <AverageOutputPerDayByMonth pvArrays={pvArraysCleaned} lat={latAdjusted} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}