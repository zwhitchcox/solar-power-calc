{"version":3,"sources":["calculations/maps.ts","calculations/util.ts","ui/degrees-input.tsx","ui/number-input.tsx","PVArraysInfo/PVArrayInfo.tsx","PVArraysInfo/PVArraysInfo.tsx","util.ts","calculations/wh-factor.ts","display/energy-production.ts","display/AverageOutputPerDayByMonth.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["year","toRadians","Math","acos","tan","angle","PI","sin","currentYear","cos","asin","Date","getFullYear","daysInYear","maxDecRad","declinationsForYear","result","Array","i","orientationsToAzimuth","forEach","orientation","addDegree","num","String","charCodeAt","length","fromCharCode","DegreesInput","props","_label","onChange","value","moreProps","useState","fakeVal","setFakeVal","className","htmlFor","name","aria-label","onBlur","onFocus","str","substr","Number","e","target","NumberInput","PVArrayInfo","remove","setVal","val","tilt","Object","keys","map","key","watts","onClick","PVArraysInfo","pvArrays","setPVArrays","pvArrayInit","removeArray","slice","pvArray","memoize","fn","cache","args","JSON","stringify","savedVersion","window","localStorage","memoizeLSVersion","startsWith","prefix","mTan","calculateWHFactorForYear","opts","dec","calculateWHFactorForDay","lat","intervalRad","F","n","a","b","Error","h","sum","simpson","x","hourAngle","percentage","instantIntensityPercentage","samplesPerDay","azimuth","sinLat","sinDec","cosHA","sinHA","cosLat","cosDec","altitude","cosAlt","tmp","getDaysInMonth","month","getDate","getAvgProdByMonth","pvArrayInfo","whFactorInfo","whFactorForYear","curDay","_","arr","monthFactors","reduce","acc","cur","whFactor","getAvgProdByMonthLS","memoizeLSPrefix","parse","truncate","precision","factor","monthLabels","AverageOutputPerDayByMonth","getAvgProdsByMonth","calculating","data","time","avgProdByMonth","setAvgProdByMonth","useEffect","setTimeout","calculate","startTime","endTime","renderCalculating","renderAvgProdByMonth","getSingleMonth","calculationTime","monthlyData","push","renderMonth","console","log","production","underLine","borderBottom","style","prod","renderTotal","lsPVArrays","pvArraysInit","latInit","App","setLat","latAdjusted","pvArraysCleaned","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7bdba3a.chunk.js","sourcesContent":["import { toRadians } from \"./util\"\n\nconst {\n  sin,\n  cos,\n  asin,\n  acos,\n  PI\n} = Math\n\nconst currentYear = new Date().getFullYear()\nconst isLeapYear = year => year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)\nconst daysInYear = isLeapYear(currentYear) ? 366 : 365\nconst maxDecRad = toRadians(23.45)\nconst getDeclinationFromDayOfYear = dayOfYear => (\n  maxDecRad * sin(toRadians(360/365 * (dayOfYear - 81)))\n)\nexport const declinationsForYear = (() => {\n  const result = new Array(daysInYear)\n  for (let i = 0; i < daysInYear; i++) {\n    result[i] = getDeclinationFromDayOfYear(i)\n  }\n  return result\n})()\n\n\nexport const orientationsToAzimuth = (() => {\n  const orientations = [\n    'N',\n    'NNE',\n    'NE',\n    'ENE',\n    'E',\n    'ESE',\n    'SE',\n    'SSE',\n    'S',\n    'SSW',\n    'SW',\n    'WSW',\n    'W',\n    'WNW',\n    'NW',\n    'NNW',\n  ]\n  const result = {}\n  orientations\n    .forEach((orientation, i) => result[orientation]= i*22.5)\n  return result\n})()\n","const {\n  acos,\n  tan\n} = Math\nexport const toRadians = angle => angle * Math.PI / 180\nexport const toDegrees = angle => angle * 180 / Math.PI\n\nexport const simpson = (F, n, a, b) => {\n    if (n % 2 !== 0) {\n        throw new Error(\"n must be even\")\n    }\n    const h = (b - a) / n\n    let sum = F(a);\n\n    for (let i = 1; i < n; i++) {\n        sum += F(i*h + a) * (i % 2 == 0 ? 2 : 4)\n    }\n\n    sum += F(n*h)\n\n    return sum * h / 3\n}\n\n\n","import React, { useState } from 'react'\nimport \"./degrees-input.css\"\n\n export const addDegree = num => {\n if (String(num).charCodeAt(num.length - 1) == 176) {\n    return num\n  }\n  return num + String.fromCharCode(176)\n}\nexport const removeDegree = str => {\n  str = String(str)\n  if (str.charCodeAt(str.length - 1) == 176)\n    return str.substr(0, str.length - 1)\n  return Number(str)\n}\nexport const DegreesInput = props => {\n  const {_label, onChange, value, ...moreProps} = props\n  const [fakeVal, setFakeVal] = useState(addDegree(value))\n  return <>\n    <label className=\"degrees-label\" htmlFor={_label}>{_label}</label>\n    <input\n      className=\"degrees-input\"\n      name={_label}\n      value={fakeVal}\n      aria-label={_label}\n      onBlur={() => {\n        const val = value === \"\" ? 0 : value\n        setFakeVal(addDegree(val))\n      }}\n      onFocus={() => {\n        setFakeVal(removeDegree(value))\n      }}\n      onChange={e => {\n        setFakeVal(e.target.value)\n        onChange(e.target.value)\n      }}\n      {...moreProps}\n\n    />\n  </>\n}","import React from 'react'\nimport \"./number-input.css\"\n\nexport const NumberInput = props => {\n  const {_label, ...moreProps} = props\n  return <>\n    <label className=\"number-label\" htmlFor={_label}>{_label}</label>\n    <input\n      className=\"number-input\"\n      name={_label}\n      aria-label={_label}\n      {...moreProps}\n    />\n  </>\n}","import React from 'react'\nimport { orientationsToAzimuth } from '../calculations/maps'\nimport { DegreesInput } from '../ui/degrees-input'\nimport \"./PVArrayInfo.css\"\nimport { NumberInput } from '../ui/number-input'\n\nexport const PVArrayInfo = ({remove, setVal, val}) => {\n  return <>\n    <div className=\"form-group\">\n      <DegreesInput\n        onChange={value => setVal(\"tilt\", value)}\n        _label=\"Tilt\"\n        value={val.tilt}\n      />\n    </div>\n    <div className=\"form-group\">\n      <label htmlFor=\"orientation\">Orientation</label>\n      <select\n        className=\"select-group\"\n        value={val.orientation}\n        onChange={e => setVal(\"orientation\", e.target.value)}\n      >\n        {\n          Object.keys(orientationsToAzimuth)\n            .map(orientation => (\n              <option\n              key={orientation}\n              value={orientation}\n              >\n                {orientation}\n              </option>\n            )\n          )\n        }\n      </select>\n    </div>\n    <div className=\"form-group\">\n      <NumberInput\n        _label=\"Watts\"\n        value={val.watts}\n        onChange={e => setVal(\"watts\", e.target.value)}\n      />\n      <button className=\"button\" onClick={remove}>-</button>\n    </div>\n  </>\n}\n","import React, {useState} from 'react'\nimport \"./PVArraysInfo.css\"\nimport { PVArrayInfo } from './PVArrayInfo'\n\nexport const PVArraysInfo = ({pvArrays, setPVArrays, pvArrayInit}) => {\n\n  const addArray = () => setPVArrays([...pvArrays, pvArrayInit])\n  const removeArray = i => () => setPVArrays([\n    ...pvArrays.slice(0, i),\n    ...pvArrays.slice(i + 1),\n  ])\n  const setVal = i => (key, val) => setPVArrays([\n    ...pvArrays.slice(0, i),\n    {\n      ...pvArrays[i],\n      [key]: val,\n    },\n    ...pvArrays.slice(i + 1),\n  ])\n  return <>\n    <div className=\"panels-group\">\n      <h3 className=\"pv-arrays-header\">PV Arrays</h3>\n      {pvArrays.map((pvArray, i) => (\n        <div>\n        <span className=\"array-number\">{i+ 1}.</span>\n        <PVArrayInfo\n          key={i}\n          setVal={setVal(i)}\n          remove={removeArray(i)}\n          val={pvArrays[i]}\n        />\n        </div>\n      ))}\n    <button className=\"button\" onClick={addArray}>+</button>\n    </div>\n  </>\n}","export const memoize = fn => {\n  const cache = {}\n  return (...args) => {\n    const key = JSON.stringify(args)\n    if (cache[key]) {\n      return cache[key]\n    }\n    return cache[key] = fn(...args)\n  }\n}\n\nconst memoizeLSPrefix = \"memoizeLS\"\nconst memoizeLSVersion = \"1\"\nconst savedVersion = window.localStorage.memoizeLSVersion\nif (typeof savedVersion !== \"undefined\" && savedVersion !== memoizeLSVersion) {\n  for (const key in window.localStorage) {\n    if (key.startsWith(memoizeLSPrefix)) {\n      delete window.localStorage[key]\n    }\n  }\n}\n\nexport const memoizeLS = (prefix, fn) => {\n  return (...args) => {\n    const key = memoizeLSPrefix + memoizeLSVersion + prefix + JSON.stringify(args)\n    if (window.localStorage[key]) {\n      return JSON.parse(window.localStorage[key])\n    }\n    const result = fn(...args)\n    window.localStorage[key] = JSON.stringify(result)\n    return result\n  }\n}","import { simpson, toRadians } from './util'\nimport { declinationsForYear } from './maps'\nimport { memoize } from '../util'\nconst SAMPLES_PER_DAY = 1000\n\nconst {\n  sin,\n  cos,\n  asin,\n  acos,\n  tan,\n  PI\n} = Math\n\nconst mCos = memoize(cos)\nconst mSin = memoize(sin)\nconst mTan = memoize(tan)\n\nexport const calculateWHFactorForYear = memoize(opts => (\n  declinationsForYear.map(dec => calculateWHFactorForDay({...opts, dec}))\n))\n\nexport const noonToSunsetRad = (lat, dec) => (\n  acos(-mTan(lat)*mTan(dec)) / toRadians(15)\n)\nexport const calculateWHFactorForDay = memoize(opts => {\n  const instantPercentage = x => {\n    const hourAngle = x*PI/12\n    if (typeof hourAngle === \"undefined\") {\n      debugger\n    }\n    const percentage = instantIntensityPercentage({\n      ...opts,\n      hourAngle\n    })\n    if (percentage < 0) {\n      return 0\n    }\n    return percentage\n  }\n  const intervalRad = noonToSunsetRad(opts.lat, opts.dec)\n  const result = simpson(instantPercentage, opts.samplesPerDay, -intervalRad, intervalRad)\n  return result\n})\n\nexport const instantIntensityPercentage = memoize(opts => {\n  const { lat, dec, tilt, orientation, hourAngle } = opts\n  const sinLat = sin(lat)\n  const sinDec = sin(dec)\n  const cosHA = cos(hourAngle)\n  const sinHA = sin(hourAngle)\n  const cosLat = cos(lat)\n  const cosDec = cos(dec)\n  const altitude = asin(sinDec * sinLat + cosDec * cosHA * cosLat)\n  const cosAlt = cos(altitude)\n\n  const tmp = (sinDec * cosLat - cosDec * cosHA * sinLat) /  cosAlt\n\n  let azimuth;\n  if (tmp < -1) {\n    azimuth = Math.PI\n  } else if (tmp > 1) {\n    azimuth = 0\n  } else {\n    azimuth = acos(tmp)\n  }\n\n  if (sinHA > 0) {\n    azimuth = 2 * PI - azimuth\n  }\n  const sinAlt = sin(altitude)\n  return sinAlt * cos(tilt) + cosAlt * sin(tilt) * cos(orientation - azimuth)\n})","import { calculateWHFactorForYear } from \"../calculations/wh-factor\"\nimport { memoize, memoizeLS } from \"../util\"\n\n\nconst currentYear = new Date().getFullYear()\nconst getDaysInMonth = memoize((year, month) => new Date(year, month, 0).getDate())\nconst getIntervalAvg = arr => arr.reduce((acc, cur) => acc+cur, 0) / arr.length\n\nexport const getAvgProdByMonth = memoize(pvArrayInfo => {\n  const { watts, ...whFactorInfo } = pvArrayInfo\n  const whFactorForYear = calculateWHFactorForYear(whFactorInfo)\n  let curDay = 0\n  return [...new Array(12)]\n    .map((_, i) => {\n      const monthFactors = whFactorForYear\n        .slice(curDay, curDay += getDaysInMonth(currentYear, i))\n      const intervalAvg = getIntervalAvg(monthFactors)\n      return intervalAvg\n    })\n    .map(whFactor => whFactor*watts)\n})\n\nexport const getAvgProdByMonthLS = memoizeLS(\"getAvgProdByMonth\", getAvgProdByMonth)","import React, { useState, useEffect } from 'react'\nimport { getAvgProdByMonthLS } from './energy-production'\nimport \"./styles.css\"\nimport { memoize } from '../util'\n\n\nconst truncate = (num, precision) => {\n  const factor = 10**precision\n  return (num * factor | 0) / factor\n}\nconst monthLabels = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n]\nexport const AverageOutputPerDayByMonth = ({pvArrays, lat}) => {\n  const getAvgProdsByMonth = pvArrays => pvArrays\n    .map(pvArray => getAvgProdByMonthLS({...pvArray, lat, samplesPerDay: 100}))\n  const [avgProdByMonth, setAvgProdByMonth] =\n    useState({\n      calculating: false,\n      data: [] as any[],\n      time: 0,\n    })\n  useEffect(() => {\n    setTimeout(calculate, 0)\n  }, [])\n\n  const calculate = () => {\n    setAvgProdByMonth({\n      data: [],\n      calculating: true,\n      time: 0,\n    })\n    setTimeout(() => {\n      const startTime = +new Date\n      const data = getAvgProdsByMonth(pvArrays)\n      const endTime = +new Date\n      setAvgProdByMonth({\n        data,\n        calculating: false,\n        time: endTime - startTime,\n      })\n    }, 0)\n  }\n  return (\n    <div>\n    <button className=\"button\" onClick={calculate}>Calculate</button>\n    <h3 className=\"display-header\">\n      Average Production Per Day By Month (kw/h)\n    </h3>\n    {avgProdByMonth.calculating ?\n      renderCalculating() :\n      renderAvgProdByMonth(avgProdByMonth)}\n    </div>\n  )\n}\nconst renderCalculating = () => <div className=\"calculating\">Calculating...</div>\n\nconst renderCalculationTime = calculationTime => {\n  if (calculationTime > 10) {\n    console.log(\"calculationTime\", calculationTime)\n    return (\n      <div className=\"calc-time\">\n        Calculation Time: {truncate(calculationTime/1000, 2)} seconds\n      </div>\n    )\n  }\n  return \"\"\n}\n\nconst getSingleMonth = memoize((data, i) => (\n  data.reduce((acc, cur) => [...acc, cur[i]], [])\n))\nconst renderAvgProdByMonth = avgProdByMonth => {\n  // const monthProds = []\n  // avgProdByMonth\n  //   .map((prod, i) => )\n\n  const monthlyData = [] as any[]\n  for (let i = 0; i < 12; i++) {\n    monthlyData.push(getSingleMonth(avgProdByMonth.data, i))\n  }\n\n  return (\n    <>\n      <div className=\"all-months-wrapper\">\n        {monthlyData.map(renderMonth)}\n      </div>\n      {renderCalculationTime(avgProdByMonth.time)}\n    </>\n  )\n}\n\nconst renderMonth = (production, i) => {\n  const underLine = production.length > 1 ? {\n    borderBottom: \"1px solid black\",\n  } : {}\n  return (\n    <div key={i} className=\"month-wrapper\">\n      <div className=\"month-label\">{monthLabels[i]}</div>\n      <div style={underLine}>\n        {production.map((prod, i) => (\n          <div className=\"month-data\" key={i}>\n            {/* {production.length > 1 ? (i + 1) + \". \" : \"\"} */}\n            {truncate(prod / 1000, 2)}</div>\n        ))}\n      </div>\n      {renderTotal(production)}\n    </div>\n  )\n}\n\nconst renderTotal = production => {\n  if (production.length < 2) {\n    return \"\"\n  }\n  const sum = production.reduce((acc, cur) => acc + cur, 0)\n  return <div className=\"month-total\">\n    {truncate(sum / 1000, 2)}\n  </div>\n}\n\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport {PVArraysInfo} from './PVArraysInfo/PVArraysInfo';\nimport { AverageOutputPerDayByMonth } from './display/AverageOutputPerDayByMonth';\nimport { toRadians } from './calculations/util';\nimport { orientationsToAzimuth } from './calculations/maps';\nimport { DegreesInput } from './ui/degrees-input';\nimport { NumberInput } from './ui/number-input';\n\nconst pvArrayInit = {\n  tilt: 0,\n  orientation: \"S\",\n  watts: 500,\n}\nconst lsPVArrays = window.localStorage.pvArrays\nconst pvArraysInit = lsPVArrays ? JSON.parse(lsPVArrays) : [pvArrayInit]\nconst latInit = window.localStorage.lat ? window.localStorage.lat : 0\nconst samplesPerDayInit = window.localStorage.samplesPerDay ? Number(window.localStorage.samplesPerDay) : 100\nconst App: React.FC = () => {\n  const [pvArrays, setPVArrays] = useState(pvArraysInit)\n  const [lat, setLat] = useState(latInit)\n  const latAdjusted = toRadians(Number(lat))\n  const pvArraysCleaned = pvArrays.map(pvArray => ({\n    ...pvArray,\n    orientation: toRadians(orientationsToAzimuth[pvArray.orientation]),\n    tilt: toRadians(pvArray.tilt)\n  }))\n  window.localStorage.pvArrays = JSON.stringify(pvArrays)\n  window.localStorage.lat = lat\n  return (\n    <div className=\"App\">\n      <header>\n        <h1 className=\"header\">Solar Power Calculator</h1>\n      </header>\n      <div>\n        <div className=\"form-group\">\n        <DegreesInput\n          onChange={value => setLat(value)}\n          _label=\"Latitude\"\n          value={lat}\n        />\n        </div>\n        <div className=\"form-group\">\n        </div>\n      </div>\n      <PVArraysInfo\n        pvArrays={pvArrays}\n        setPVArrays={setPVArrays}\n        pvArrayInit={pvArrayInit}\n      />\n      <AverageOutputPerDayByMonth pvArrays={pvArraysCleaned} lat={latAdjusted} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}